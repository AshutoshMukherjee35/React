Why do we use Super(props), constructor(props)?
Access to Parent Class's Constructor - When a child class extends a parent class, the
child class can have its constructor. However, if the child class has a constructor,
it must call super(props) as the first statement in its constructor. This is because
super(props) is used to invoke the constructor of the parent class, ensuring that
the parent class'\s initialization is performed before the child class\'s constructor
code is executed. It is essential to maintain the inheritance chain correctly.

Passing Props to the Parent Constructor - By passing props to super(props), we ensure
that the props object is correctly passed to the parent class's constructor. This is
important because the parent class may need to set up its properties or handle the
props somehow. By calling super(props), we make the props available for the
parent class's constructor to work with.


loading a class based component means creating an instance of the class

In class based components we do not update the state variables directly
this.state.count = this.state.count+1 this is invalid way of changing the state.
instead we use this.setState() function. That takes in an object
that modifies your state.

In Class Based Components, When a child component is used inside a Parent component. 
In such cases the process takes place in a certain order as follows:-

a. The Parent constructor gets called first.
b. Then the Parent render method gets called second. Now there is a child component that is being instantiated inside the parent now the
methods of child components gets called in the same order.
c. The child constructor gets called first(with reference of child) i.e third with reference to the complete process.
d. Then the child render method gets called fourth.

Now, if we use a componentdidmount() method in the class based components then this method gets called at the last i.e after the render is done
and the component is visible on the screen.

So in this case the process order would be:

a. The parent constructor is called 1st
b. The parent render method is called 2nd
c. The child constructor is called 3rd
d. The child render method is called 4th
e. The child component did mount gets called 5th
f. The parent component did mount gets called 6th

componentdidmount() is used to make API calls. As we want to render the component 1st and then load the data while the
data is being fetched by the API.

Take a look into this diagram: https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

In React, first the the components constructor is called, then the render method is called. After this REACT updates the DOM
and after this the componentdidmount() method is called. As the componentdidmount() executes at last so that is the reason 
we make API calls in this method.


import React from 'react'
import User from './User'
import UserClass from './UserClass'


class About extends React.Component{
  constructor(props){
    super(props)
    console.log('Parent constructor called')
  }

  componentDidMount(){
    console.log('Parent component did mount')
  }

  render() {
    console.log('Parent render called')
    return(
      <div>
        <h1>About</h1>
        <h2>This is about component</h2>
        {/* <User name={'Ashutosh Mukherjee (function)'}/> */}
        <UserClass name={'Ashutosh Mukherjee (Class)'} location={'Raipur (class)'}/>
        <UserClass name={'Elon Musk'} location={'US (class)'}/>
    </div>
    )
  }
}

export default About

import React from 'react'
import UserClassChild from './UserClassChild';

class UserClass extends React.Component{
    constructor(props) {
        super(props);
        console.log(props)

        this.state = {
            count: 0,
            count3: 3,
        }
        console.log(this.props.name+' Child constructor called')
    }

    componentDidMount() {
        console.log(this.props.name+' Child mounted')
    }

    render() {
        console.log(this.props.name+' Child render called')
        const{name , location} = this.props;
        const{count, count3} = this.state;
        return(
            <section className='card'>
                <div>
                <h3>Count: {count}</h3>
                <button onClick={()=>{
                    this.setState({
                        count: this.state.count + 1,
                        count3: this.state.count3 + 1
                    })
                }}>Increment</button>
                <h2>Name: {name}</h2>
                <h2>Location: {location}</h2>
                <h3>Contact: @ashutoshmukherjee35</h3>
                <UserClassChild name={'User Class Child'}/>
                </div>
            </section>
        )
    }
}
export default UserClass; 

import React from 'react'

class UserClassChild extends React.Component{
    constructor(props){
        super(props);

        console.log(this.props.name+' youngest child constructor')
    }

    componentDidMount(){
        console.log(this.props.name+' youngest child componentDidMount');
    }

    render() {
        console.log(this.props.name+ ' youngest child render ')
        const {name} = this.props;
        return(
            <div>
                <h1>{name+"static content"}</h1>
            </div>
        )
    }
}
export default UserClassChild


IN the above scenario the order of execution would be like this:-

- PARENT CONSTRUCTOR called
- PARENT RENDER called
    - ASHUTOSH CONSTRUCTOR called
    - ASHUTOSH RENDER called
    - UserClassChild CONSTRUCTOR called
    - UserClassChild RENDER called

    - Elon CONSTRUCTOR called
    - Elon RENDER called
    - UserClassChild CONSTRUCTOR called
    - UserClassChild RENDER called

- UserClassChild componentDidMount() called
- ASHUTOSH componentDidMount() called
- UserClassChild componentDidMount() called
- Elon componentDidMount() called
- PARENT componentDidMount() CALLED. 

Never compare REACT LIFECYCLE to functional components. So never compare componentDidMount() with useEffect() hook

----------------------------------------

 componentDidMount() {
        // You can see that the setinterval is getting executed everytime even when we are navigating away from the page.
        //to mitigate this we have to write a cleanup code and we write it in the component will unmount method
        this.timer = setInterval(()=>{
            console.log('User class component did mount called every second')
        }, 1000)
    }

    componentDidUpdate() {
        console.log('Component DID update of user class');
    }

    componentWillUnmount() {
        clearInterval(this.timer)
        console.log('component unmounted')
    }
    --------------------------------------------


    import { useState, useEffect } from "react";

const User = (props) => {
    const[count] = useState(0);
    const [count2] = useState(2);

    useEffect(() => {
        //API calls
     let timer =  setInterval(()=> {
            console.log("Hello");
        },1000);

        //this is how u unmount using useEffect hook
        return () => {
            clearInterval(timer);
        }
    },[])

    return (
        <section className="card">
            <div>
            <h3>Count: {count}</h3>
            <h3>Count: {count2}</h3>
            <h2>Name: {props.name}</h2>
            <h2>Location: Raipur</h2>
            <h3>Contact: @ashutoshmukherjee35</h3>
            </div>
        </section>
    )
}
export default User;

Q ) (Research) Why can't we have the callback
function of useEffect async ?
A: In React, the  useEffect  hook is designed to handle side effects in functional
components. It's a powerful and flexible tool for managing asynchronous
operations, such as data fetching, API calls, and more. However, useEffect itself
cannot directly accept an async callback function. This is because useEffect
expects its callback function to return either nothing (i.e., undefined) or a cleanup
function, and it doesn't work well with Promises returned from async functions.

There are a few reasons for this:

Return Value Expectation - The primary purpose of the useEffect callback function is
to handle side effects and perform cleanup. React expects us to either return
nothing (i.e., undefined) from the callback or return a cleanup function. An async
function returns a Promise, and it doesn't fit well with this expected behavior.
Execution Order and Timing - With async functions, we might not have fine-grained
control over the execution order of the asynchronous code and the cleanup code.
React relies on the returned cleanup function to handle cleanup when the
component is unmounted or when the dependencies specified in the useEffect
dependency array change. If you return a Promise, React doesn't know when or
how to handle cleanup